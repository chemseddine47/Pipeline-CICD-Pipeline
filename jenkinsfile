pipeline {
    agent any

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    npm ci
                    npm run build
                '''
            }
        }

        stage('SonarQube Analysis') {
            agent none
            steps {
                withSonarQubeEnv('SonarQube') { // Make sure the SonarQube configuration is correct in Jenkins
                    sh '''
                        npm install sonar-scanner --save-dev
                        npx sonar-scanner -Dsonar.projectKey=Secure-CI-CD-Pipeline
                    '''
                }
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    test -f build/index.html
                    npm test
                '''
            }
        }

        stage('Deploy') {
            steps {
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        cd "$WORKSPACE/build"
                        
                        git init

                        git checkout --orphan gh-pages 2>/dev/null || git checkout gh-pages

                        git add -f .
                        git config user.name "chemseddine47"
                        git config user.email "chamssedine47007@gmail.com"
                        git commit -m "Deploying to GitHub Pages"

                        git push https://${GITHUB_TOKEN}@github.com/chemseddine47/Pipeline-CICD-Pipeline.git gh-pages --force
                    '''
                }
            }
        }
    }
}
